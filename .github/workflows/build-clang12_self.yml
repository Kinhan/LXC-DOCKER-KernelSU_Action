name: 低端机 谷歌clang12.0.5-self
on:
  workflow_dispatch:

jobs:
  build:
    name:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - uses: actions/checkout@v3

    - name: 环境变量配置
      run: |
        cat config.env | grep KERNEL_SOURCE= >> $GITHUB_ENV
        cat config.env | grep KERNEL_SOURCE_BRANCH= >> $GITHUB_ENV
        cat config.env | grep KERNEL_CONFIG= >> $GITHUB_ENV
        cat config.env | grep KERNEL_ZIP_NAME= >> $GITHUB_ENV
        cat config.env | grep LLVM_CONFIG= >> $GITHUB_ENV
        cat config.env | grep ENABLE_KERNELSU= >> $GITHUB_ENV
        cat config.env | grep KERNELSU_TAG= >> $GITHUB_ENV
        cat config.env | grep ENABLE_KVM= >> $GITHUB_ENV
        cat config.env | grep ENABLE_LXC_DOCKER= >> $GITHUB_ENV
        cat config.env | grep ENABLE_KERNELSU= >> $GITHUB_ENV
        cat config.env | grep KERNELSU_TAG= >> $GITHUB_ENV

    - name: 构建编译内核环境
      run: |
        sudo apt update
        sudo apt -y install git make bc bison ccache openssl zip kmod cpio flex libelf-dev curl libssl-dev libtfm-dev wget device-tree-compiler ca-certificates python3 python2 binutils gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace

    - name: 下载谷歌clang12编译器
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir clang-aosp
        git clone -q --depth=1 --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 -b android12-release clang-aosp

    - name: Download mkbootimg tools
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://android.googlesource.com/platform/system/tools/mkbootimg tools -b master-kernel-build-2022 --depth=1

    - name: 下载内核源码
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} android-kernel --depth=1

    - name: Download source boot image
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget -O boot-source.img https://raw.githubusercontent.com/Kinhan/lxc-docker-kernelsu_action/main/magisk_patched-27000_32okE.img
        if [ -f boot-source.img ]; then
            echo "FORMAT_MKBOOTING=$(echo `tools/unpack_bootimg.py --boot_img=boot-source.img --format mkbootimg`)" >> $GITHUB_ENV
            echo "HAVE_SOURCE_BOOT_IMAGE=true" >> $GITHUB_ENV
        fi  

    - name: 开启lxc和docker配置
      if: env.ENABLE_LXC_DOCKER == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget https://raw.githubusercontent.com/Kinhan/android-lxc-docker/main/LXC-DOCKER-OPEN-CONFIG.sh
        chmod 777 LXC-DOCKER-OPEN-CONFIG.sh
        ./LXC-DOCKER-OPEN-CONFIG.sh android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }} -w
        echo "# CONFIG_ANDROID_PARANOID_NETWORK is not set" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    - name: 添加runc补丁
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        wget https://raw.githubusercontent.com/Kinhan/android-lxc-docker/main/runcpatch.sh
        chmod a+x runcpatch.sh
        if [ -f android-kernel/kernel/cgroup.c ]; then
        ./runcpatch.sh android-kernel/kernel/cgroup.c               
        fi
        if [ -f android-kernel/kernel/cgroup/cgroup.c ]; then
        ./runcpatch.sh android-kernel/kernel/cgroup/cgroup.c               
        fi
        
        if [ -f android-kernel/net/netfilter/xt_qtaguid.c ]; then
          wget https://raw.githubusercontent.com/Kinhan/android-lxc-docker/main/xt_qtaguid.patch
          patch -p0 < xt_qtaguid.patch
        fi

    - name: 配置 ksu
      if: env.ENABLE_KERNELSU == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s ${{ env.KERNELSU_TAG }}

    - name: 开启kvm
      if: env.ENABLE_KVM == 'true'
      run: |
         cd $GITHUB_WORKSPACE/kernel_workspace
         echo "CONFIG_VIRTUALIZATION=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
         echo "CONFIG_KVM=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
         echo "CONFIG_VHOST_NET=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}
         echo "CONFIG_VHOST_CROSS_ENDIAN_LEGACY=y" >> android-kernel/arch/arm64/configs/${{ env.KERNEL_CONFIG }}

    - name: 设置ccache缓存
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: build-kernel-mido-kernel
        max-size: 2G

    - name: 开始编译内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/clang-r416183b/bin:$PATH
        make O=out ARCH=arm64 ${{ env.KERNEL_CONFIG }}
        if [ ${{env.LLVM_CONFIG}}=y ]; then
        make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CROSS_COMPILE="aarch64-linux-gnu-" CROSS_COMPILE_ARM32="arm-linux-gnueabi-" LLVM=1 LLVM_IAS=1
        else
        make -j$(nproc --all) CC="ccache clang" O=out ARCH=arm64 CROSS_COMPILE="aarch64-linux-gnu-" CROSS_COMPILE_ARM32="arm-linux-gnueabi-"
        fi

    - name: 准备打包内核
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/osm0sis/AnyKernel3
        sed -i 's/do.devicecheck=1/do.devicecheck=0/g' AnyKernel3/anykernel.sh
        sed -i 's!block=/dev/block/platform/omap/omap_hsmmc.0/by-name/boot;!block=auto;!g' AnyKernel3/anykernel.sh
        sed -i 's/is_slot_device=0;/is_slot_device=auto;/g' AnyKernel3/anykernel.sh
        cp android-kernel/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/
        rm -rf AnyKernel3/.git* AnyKernel3/README.md
        rm -rf AnyKernel3/ramdisk AnyKernel3/modules AnyKernel3/patch
    - name: Make boot image
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        tools/unpack_bootimg.py --boot_img boot-source.img
        cp android-kernel/out/arch/arm64/boot/Image.gz-dtb out/kernel
        tools/mkbootimg.py ${{ env.FORMAT_MKBOOTING }} -o boot.img
        if [ -f boot.img ]; then
            echo "MAKE_BOOT_IMAGE_IS_OK=true" >> $GITHUB_ENV
        else
            echo "Boot image is empty"
            exit 1
        fi
    - name: Upload boot image
      if: env.MAKE_BOOT_IMAGE_IS_OK == 'true'
      uses: actions/upload-artifact@v3
      with:
        name: boot.img
        path: kernel_workspace/boot.img
        
    - name: 打包并上传
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.KERNEL_ZIP_NAME }}
        path: kernel_workspace/AnyKernel3/*
